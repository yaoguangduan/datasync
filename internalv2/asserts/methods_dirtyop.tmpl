{{/* gotype:github.com/yaoguangduan/datasync/internalv2/def.GoStructInfo*/}}

// struct  {{.StructName}} dirty operate methods start

func (x *{{.StructName}}) MergeDirtyToPb(r *{{.MessageName}}) *{{.StructName}}{
	{{if $.HasMapOrListField}}
	var raw = syncdep.ToRawMessage(r.ProtoReflect().GetUnknown())
	{{end}}
    {{range .Fields}}

	{{if eq .Kind "map"}}
	if x.is{{title .FieldName}}Dirty() {
        updated := make([]{{.MapKeyType}}, 0)
		if r.{{.OriFieldName}} != nil {
            for k := range r.{{.OriFieldName}} {
                if x.{{.FieldName}}.ContainDeleted(k) {
                    delete(r.{{.OriFieldName}}, k)
                }
                if x.{{.FieldName}}.ContainDirtied(k) {
                    updated = append(updated, k)
                    tmp := x.{{.FieldName}}.Get(k)
                    if r.{{.OriFieldName}}[k] == nil {
                        r.{{.OriFieldName}}[k] = &{{.Struct.MessageName}}{}
                    }
                    tmp.MergeDirtyToPb(r.{{.OriFieldName}}[k])
                }
            }
        } else {
            r.{{.OriFieldName}} = make(map[{{.MapKeyType}}]*{{.Struct.MessageName}})
        }
        for k := range x.{{.FieldName}}.Dirtied() {
            if !slices.Contains(updated, k) {
                tmp := x.{{.FieldName}}.Get(k)
                if r.{{.OriFieldName}}[k] == nil {
                    r.{{.OriFieldName}}[k] = &{{.Struct.MessageName}}{}
                }
                tmp.MergeDirtyToPb(r.{{.OriFieldName}}[k])
            }
        }
        {{if eq .MapKeyType "string"}}
		for k := range x.{{.FieldName}}.Deleted() {
			raw.AddString({{.MapDelNumber}},k)
		}
		{{else if eq .MapKeyType "bool"}}
        for k := range x.{{.FieldName}}.Deleted() {
			var tmp = 0
			if k {
			    tmp = 1
            }
            raw.AddVarint({{.MapDelNumber}},uint64(tmp))
        }
		{{else}}
        for k := range x.{{.FieldName}}.Deleted() {
            raw.AddVarint({{.MapDelNumber}},uint64(k))
        }
		{{end}}
    }
	{{else if eq .Kind "list"}}
    if x.is{{title .FieldName}}Dirty() {
        count := x.{{.FieldName}}.Len()
        r.{{.OriFieldName}} = make([]{{.ListType}}, 0)
        if count > 0 {
			raw.ClearBool({{.ListClearNumber}})
            r.{{.OriFieldName}} = append(r.{{.OriFieldName}}, x.{{.FieldName}}.ValueView()...)
        } else {
            raw.SetBool({{.ListClearNumber}})
        }
    }
    {{else if eq .Kind "message"}}
	if x.is{{title .FieldName}}Dirty() {
        if r.{{.OriFieldName}} == nil {
            r.{{.OriFieldName}} = &{{.Struct.MessageName}}{}
        }
        x.{{.FieldName}}.MergeDirtyToPb(r.{{.OriFieldName}})
	}
    {{else if eq .Kind "[]byte"}}
    if x.is{{title .FieldName}}Dirty() {
		r.{{.OriFieldName}} = slices.Clone(x.{{.FieldName}})
    }
	{{else}}
    if x.is{{title .FieldName}}Dirty() {
		tmp := x.{{.FieldName}}
		r.{{.OriFieldName}} = &tmp
    }
	{{end}}
	{{end}}
    {{if $.HasMapOrListField}}
    r.ProtoReflect().SetUnknown(raw.Marshal())
	{{end}}
	return x
}


func (x *{{.StructName}}) MergeDirtyFromPb(r *{{.MessageName}}) *{{.StructName}}{
    {{if $.HasMapOrListField}}
    var raw = syncdep.ToRawMessage(r.ProtoReflect().GetUnknown())
	{{end}}
    {{range .Fields}}
    {{if eq .Kind "map"}}
	if x.{{.FieldName}} != nil {
        x.{{.FieldName}}.RemoveAll(raw.Get{{title .MapKeyType}}List({{.MapDelNumber}}))
    }
    for k, v := range r.{{.OriFieldName}} {
        var tmp = x.Get{{title .FieldName}}().Get(k)
        if tmp == nil {
            tmp = New{{.Struct.StructName}}()
            tmp.MergeDirtyFromPb(v)
            x.Get{{title .FieldName}}().Put(k, tmp)
        } else {
            tmp.MergeDirtyFromPb(v)
        }
    }
	{{else if eq .Kind "list"}}
    if len(r.{{.OriFieldName}}) > 0 || raw.GetBool({{.ListClearNumber}}) {
        x.Get{{title .FieldName}}().Clear()
        x.{{.FieldName}}.AddAll(r.{{.OriFieldName}})
    }
    {{else if eq .Kind "message"}}
    if r.{{.OriFieldName}} != nil {
        x.Get{{title .FieldName}}().MergeDirtyFromPb(r.{{.OriFieldName}})
    }
	{{else if eq .Kind "[]byte"}}
    if len(r.{{.OriFieldName}}) > 0 {
        x.Set{{title .FieldName}}(slices.Clone(r.{{.OriFieldName}}))
    }
	{{else}}
    if r.{{.OriFieldName}} != nil {
        x.Set{{title .FieldName}}(*r.{{.OriFieldName}})
    }
	{{end}}
	{{end}}
	return x
}

func (x *{{.StructName}}) MergeDirtyFromBytes(buf []byte) {
	{{if $.HasMapOrListField}}
    vn := make([]int32, 0)
	un := make([]interface{}, 0) // uint64  []byte fixed32 fixed64
    for len(buf) > 0 {
        num, typ, n := protowire.ConsumeTag(buf)
        if n < 0 {
        panic(syncdep.ErrParseRawFields)
        }
        buf = buf[n:]
        switch num {
		    {{range .Fields}}
			{{if eq .Kind "list"}}
			case {{.ListClearNumber}}:
                _, n := protowire.ConsumeVarint(buf)
                if n < 0 {
                    panic(syncdep.ErrParseRawFields)
                }
                buf = buf[n:]
				x.Get{{title .FieldName}}().Clear()
			{{end}}
            {{if eq .Kind "map"}}
            case {{.MapDelNumber}}:
                if x.{{.FieldName}} != nil {
                    bys, n := protowire.ConsumeBytes(buf)
                    if n < 0 {
                        panic(syncdep.ErrParseRawFields)
                    }
                    buf = buf[n:]
					{{if eq .MapKeyType "string"}}
                    x.Get{{title .FieldName}}().Remove(syncdep.Bys2Str(bys))
					{{else}}
					syncdep.VarintRange(bys,func(val uint64){
                        {{if eq .MapKeyType "bool"}}
                        x.Get{{title .FieldName}}().Remove(val > 0)
                        {{else}}
                        x.Get{{title .FieldName}}().Remove({{.MapKeyType}}(val))
                        {{end}}
					})
					{{end}}
                }
            {{end}}
			{{end}}
            default:
                vn = append(vn, int32(num))
				var v interface{}
                switch typ {
                case protowire.VarintType:
                    v, n = protowire.ConsumeVarint(buf)
                case protowire.Fixed32Type:
					var f32 uint32
                    f32, n = protowire.ConsumeFixed32(buf)
                    v = math.Float32frombits(f32)
                case protowire.Fixed64Type:
					var f64 uint64
                    f64, n = protowire.ConsumeFixed64(buf)
                    v = math.Float64frombits(f64)
                case protowire.BytesType:
                    v, n = protowire.ConsumeBytes(buf)
                }
                if n < 0 {
                    panic(syncdep.ErrParseRawFields)
                }
                buf = buf[n:]
                un = append(un, v)
        }
    }
	{{end}}


	{{range .Fields}}
	{{if and (eq .Kind "list") (eq .ListType "string")}}
	var {{.FieldName}}Cleared = false
	{{end}}
	{{end}}

	{{if $.HasMapOrListField}}
    for i, num := range vn {
        v := un[i]
	{{else}}
    for len(buf) > 0 {
        num, typ, n := protowire.ConsumeTag(buf)
        if n < 0 {
            panic(syncdep.ErrParseRawFields)
        }
        buf = buf[n:]
        var v interface{}
        switch typ {
        case protowire.VarintType:
            v, n = protowire.ConsumeVarint(buf)
        case protowire.Fixed32Type:
			var f32 uint32
            f32, n = protowire.ConsumeFixed32(buf)
            v = math.Float32frombits(f32)
        case protowire.Fixed64Type:
			var f64 uint64
            f64, n = protowire.ConsumeFixed64(buf)
            v = math.Float64frombits(f64)
        case protowire.BytesType:
            v, n = protowire.ConsumeBytes(buf)
        }
        if n < 0 {
            panic(syncdep.ErrParseRawFields)
        }
        buf = buf[n:]
    {{end}}
        switch num {
        {{range .Fields}}
        case {{.FieldNumber}}:
        {{if eq .Kind "map"}}
        k,bys := syncdep.ParseMap[{{.MapKeyType}}](v.([]byte))
        var tmp = x.Get{{title .FieldName}}().Get(k)
        if tmp == nil {
            tmp = New{{.Struct.StructName}}()
        }
        tmp.MergeDirtyFromBytes(bys)
        x.Get{{title .FieldName}}().Put(k,tmp)
        {{else if eq .Kind "list"}}
            {{if eq .ListType "string"}}
            if !{{.FieldName}}Cleared {
                {{.FieldName}}Cleared = true
                x.Get{{title .FieldName}}().Clear()
            }
            x.Get{{title .FieldName}}().Add(syncdep.Bys2Str(v.([]byte)))
            {{else}}
            x.Get{{title .FieldName}}().Clear()
            {{if eq .ListType "float32"}}
            syncdep.Fixed32Range(v.([]byte), func(val float32) {
                x.Get{{title .FieldName}}().Add(val)
            })
            {{else if eq .ListType "float64"}}
            syncdep.Fixed64Range(v.([]byte), func(val float64) {
                x.Get{{title .FieldName}}().Add(val)
            })
            {{else if eq .ListType "bool"}}
            syncdep.VarintRange(v.([]byte), func(val uint64) {
                x.Get{{title .FieldName}}().Add(val > 0)
            })
            {{else}}
            syncdep.VarintRange(v.([]byte), func(val uint64) {
                x.Get{{title .FieldName}}().Add({{.ListType}}(val))
            })
            {{end}}

            {{end}}
        {{else if eq .Kind "message"}}
        x.Get{{title .FieldName}}().MergeDirtyFromBytes(v.([]byte))
        {{else if eq .Kind "bool"}}
        x.Set{{title .FieldName}}(v.(uint64) > 0)
        {{else if or (eq .Kind "float32") (eq .Kind "float64")}}
        x.Set{{title .FieldName}}(v.({{.Kind}}))
        {{else if or (eq .Kind "int32") (eq .Kind "int64") (eq .Kind "uint32") (eq .Kind "uint64")}}
        x.Set{{title .FieldName}}({{.Kind}}(v.(uint64)))
        {{else if eq .Kind "[]byte"}}
        x.Set{{title .FieldName}}(v.([]byte))
        {{else if eq .Kind "string"}}
        x.Set{{title .FieldName}}(syncdep.Bys2Str(v.([]byte)))
        {{else}}
        x.Set{{title .FieldName}}({{.FieldType}}(v.(uint64)))
        {{end}}
        {{end}}
        }
    }
}

func (x *{{.StructName}}) MergeDirtyToBytes() []byte {
    var buf []byte
    {{range .Fields}}

	{{if eq .Kind "map"}}
    if x.is{{title .FieldName}}Dirty() {
        if len(x.{{.FieldName}}.Deleted()) > 0 {
			{{if eq .MapKeyType "string"}}
            for del := range x.{{.FieldName}}.Deleted() {
                buf = protowire.AppendTag(buf, {{.MapDelNumber}}, protowire.BytesType)
                buf = protowire.AppendString(buf, del)
            }
			{{else}}
            var packedBuf []byte
            for del := range x.{{.FieldName}}.Deleted() {
                packedBuf = syncdep.AppendFieldValue(packedBuf, del)
            }
            buf = protowire.AppendTag(buf, {{.MapDelNumber}}, {{.ProtoWireType}})
            buf = protowire.AppendBytes(buf, packedBuf)
			{{end}}
        }
        if x.{{.FieldName}}.Len() > 0 {
            x.{{.FieldName}}.Each(func(k {{.MapKeyType}},v *{{.Struct.StructName}}) bool {
                if !x.{{.FieldName}}.ContainDirtied(k) {
					return true
                }
                buf = syncdep.AppendMapFieldKeyValue(buf,{{.FieldNumber}}, k, v.MergeDirtyToBytes())
				return true
            })
        }
    }
	{{else if eq .Kind "list"}}
    if x.is{{title .FieldName}}Dirty() {
        if x.{{.FieldName}} != nil && x.{{.FieldName}}.Len() > 0 {
            {{if eq .ListType "string"}}
            x.{{.FieldName}}.Each(func(i int,v string) bool {
                buf = protowire.AppendTag(buf, {{.FieldNumber}}, {{.ProtoWireType}})
                buf = protowire.AppendString(buf, v)
                return true
            })
            {{else}}
            var packedBuf []byte
            x.{{.FieldName}}.Each(func(i int,v {{.ListType}})bool {
                {{if or (eq .ListType "int32") (eq .ListType "uint32") (eq .ListType "int64") (eq .ListType "uint64")}}
                packedBuf = protowire.AppendVarint(packedBuf, uint64(v))
                {{else if eq .ListType "bool"}}
                var vv uint64 = 0
                if v{
                    vv = 1
                }
                packedBuf = protowire.AppendVarint(packedBuf, vv)
                {{else if eq .ListType "float32"}}
                packedBuf = protowire.AppendFixed32(packedBuf, math.Float32bits(v))
                {{else if eq .ListType "float64"}}
                packedBuf = protowire.AppendFixed64(packedBuf, math.Float64bits(v))
				{{else}}
                packedBuf = protowire.AppendVarint(packedBuf, uint64(int32(v)))
                {{end}}
                return true
            })
            buf = protowire.AppendTag(buf, {{.FieldNumber}}, {{.ProtoWireType}})
            buf = protowire.AppendBytes(buf, packedBuf)
            {{end}}
        } else {
            buf = protowire.AppendTag(buf, {{.ListClearNumber}}, protowire.VarintType)
            buf = protowire.AppendVarint(buf, uint64(1))
        }
    }
    {{else if eq .Kind "message"}}
    if x.is{{title .FieldName}}Dirty() {
        if x.{{.FieldName}} != nil {
            bytes := x.{{.FieldName}}.MergeDirtyToBytes()
            buf = protowire.AppendTag(buf, {{.FieldNumber}}, {{.ProtoWireType}})
            buf = protowire.AppendBytes(buf, bytes)
        }
    }
	{{else}}
    if x.is{{title .FieldName}}Dirty() {
        buf = protowire.AppendTag(buf, {{.FieldNumber}}, {{.ProtoWireType}})
        {{if eq .Kind "enum"}}
        buf = protowire.AppendVarint(buf, uint64(int32(x.{{.FieldName}})))
        {{else if or (eq .Kind "int32") (eq .Kind "uint32") (eq .Kind "int64") (eq .Kind "uint64")}}
        buf = protowire.AppendVarint(buf, uint64(x.{{.FieldName}}))
        {{else if eq .Kind "bool"}}
		var v uint64 = 0
		if x.{{.FieldName}}{
			v = 1
        }
        buf = protowire.AppendVarint(buf, v)
        {{else if eq .Kind "float32"}}
        buf = protowire.AppendFixed32(buf, math.Float32bits(x.{{.FieldName}}))
        {{else if eq .Kind "float64"}}
        buf = protowire.AppendFixed64(buf, math.Float64bits(x.{{.FieldName}}))
        {{else if eq .Kind "string"}}
        buf = protowire.AppendString(buf, x.{{.FieldName}})
        {{else if eq .Kind "[]byte"}}
        buf = protowire.AppendBytes(buf, x.{{.FieldName}})
		{{end}}
    }
	{{end}}

	{{end}}
	return buf
}