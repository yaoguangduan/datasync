// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: Test.proto

package pbgenv1

import (
	_ "github.com/yaoguangduan/protosync/syncproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *int32                    `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	U32     *uint32                   `protobuf:"varint,2,opt,name=u32,proto3,oneof" json:"u32,omitempty"`
	I64     *int64                    `protobuf:"varint,3,opt,name=i64,proto3,oneof" json:"i64,omitempty"`
	U64     *uint64                   `protobuf:"varint,4,opt,name=u64,proto3,oneof" json:"u64,omitempty"`
	B       *bool                     `protobuf:"varint,5,opt,name=b,proto3,oneof" json:"b,omitempty"`
	E       *ColorType                `protobuf:"varint,6,opt,name=e,proto3,enum=ColorType,oneof" json:"e,omitempty"`
	Str     *string                   `protobuf:"bytes,7,opt,name=str,proto3,oneof" json:"str,omitempty"`
	Obj     *Person                   `protobuf:"bytes,22,opt,name=obj,proto3,oneof" json:"obj,omitempty"`
	I32Arr  []int32                   `protobuf:"varint,8,rep,packed,name=i32Arr,proto3" json:"i32Arr,omitempty"`
	U32Arr  []uint32                  `protobuf:"varint,9,rep,packed,name=u32Arr,proto3" json:"u32Arr,omitempty"`
	I64Arr  []int64                   `protobuf:"varint,10,rep,packed,name=i64Arr,proto3" json:"i64Arr,omitempty"`
	U64Arr  []uint64                  `protobuf:"varint,11,rep,packed,name=u64Arr,proto3" json:"u64Arr,omitempty"`
	BoolArr []bool                    `protobuf:"varint,12,rep,packed,name=boolArr,proto3" json:"boolArr,omitempty"`
	EnumArr []ColorType               `protobuf:"varint,13,rep,packed,name=enumArr,proto3,enum=ColorType" json:"enumArr,omitempty"`
	StrArr  []string                  `protobuf:"bytes,14,rep,name=strArr,proto3" json:"strArr,omitempty"`
	I32Map  map[int32]*TestI32Map     `protobuf:"bytes,15,rep,name=i32Map,proto3" json:"i32Map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	U32Map  map[uint32]*TestU32Map    `protobuf:"bytes,16,rep,name=u32Map,proto3" json:"u32Map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	I64Map  map[int64]*TestI64Map     `protobuf:"bytes,17,rep,name=i64Map,proto3" json:"i64Map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	U64Map  map[uint64]*TestU64Map    `protobuf:"bytes,18,rep,name=u64Map,proto3" json:"u64Map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolMap map[bool]*TestBoolMap     `protobuf:"bytes,19,rep,name=boolMap,proto3" json:"boolMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StrMap  map[string]*TestStringMap `protobuf:"bytes,21,rep,name=strMap,proto3" json:"strMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	F32     *float32                  `protobuf:"fixed32,23,opt,name=f32,proto3,oneof" json:"f32,omitempty"`
	F64     *float64                  `protobuf:"fixed64,24,opt,name=f64,proto3,oneof" json:"f64,omitempty"`
	F32Arr  []float32                 `protobuf:"fixed32,25,rep,packed,name=f32Arr,proto3" json:"f32Arr,omitempty"`
	F64Arr  []float64                 `protobuf:"fixed64,26,rep,packed,name=f64Arr,proto3" json:"f64Arr,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_Test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_Test_proto_rawDescGZIP(), []int{0}
}

func (x *Test) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Test) GetU32() uint32 {
	if x != nil && x.U32 != nil {
		return *x.U32
	}
	return 0
}

func (x *Test) GetI64() int64 {
	if x != nil && x.I64 != nil {
		return *x.I64
	}
	return 0
}

func (x *Test) GetU64() uint64 {
	if x != nil && x.U64 != nil {
		return *x.U64
	}
	return 0
}

func (x *Test) GetB() bool {
	if x != nil && x.B != nil {
		return *x.B
	}
	return false
}

func (x *Test) GetE() ColorType {
	if x != nil && x.E != nil {
		return *x.E
	}
	return ColorType_Red
}

func (x *Test) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *Test) GetObj() *Person {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *Test) GetI32Arr() []int32 {
	if x != nil {
		return x.I32Arr
	}
	return nil
}

func (x *Test) GetU32Arr() []uint32 {
	if x != nil {
		return x.U32Arr
	}
	return nil
}

func (x *Test) GetI64Arr() []int64 {
	if x != nil {
		return x.I64Arr
	}
	return nil
}

func (x *Test) GetU64Arr() []uint64 {
	if x != nil {
		return x.U64Arr
	}
	return nil
}

func (x *Test) GetBoolArr() []bool {
	if x != nil {
		return x.BoolArr
	}
	return nil
}

func (x *Test) GetEnumArr() []ColorType {
	if x != nil {
		return x.EnumArr
	}
	return nil
}

func (x *Test) GetStrArr() []string {
	if x != nil {
		return x.StrArr
	}
	return nil
}

func (x *Test) GetI32Map() map[int32]*TestI32Map {
	if x != nil {
		return x.I32Map
	}
	return nil
}

func (x *Test) GetU32Map() map[uint32]*TestU32Map {
	if x != nil {
		return x.U32Map
	}
	return nil
}

func (x *Test) GetI64Map() map[int64]*TestI64Map {
	if x != nil {
		return x.I64Map
	}
	return nil
}

func (x *Test) GetU64Map() map[uint64]*TestU64Map {
	if x != nil {
		return x.U64Map
	}
	return nil
}

func (x *Test) GetBoolMap() map[bool]*TestBoolMap {
	if x != nil {
		return x.BoolMap
	}
	return nil
}

func (x *Test) GetStrMap() map[string]*TestStringMap {
	if x != nil {
		return x.StrMap
	}
	return nil
}

func (x *Test) GetF32() float32 {
	if x != nil && x.F32 != nil {
		return *x.F32
	}
	return 0
}

func (x *Test) GetF64() float64 {
	if x != nil && x.F64 != nil {
		return *x.F64
	}
	return 0
}

func (x *Test) GetF32Arr() []float32 {
	if x != nil {
		return x.F32Arr
	}
	return nil
}

func (x *Test) GetF64Arr() []float64 {
	if x != nil {
		return x.F64Arr
	}
	return nil
}

type TestBoolMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *bool   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Addition *string `protobuf:"bytes,2,opt,name=addition,proto3,oneof" json:"addition,omitempty"`
}

func (x *TestBoolMap) Reset() {
	*x = TestBoolMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestBoolMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestBoolMap) ProtoMessage() {}

func (x *TestBoolMap) ProtoReflect() protoreflect.Message {
	mi := &file_Test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestBoolMap.ProtoReflect.Descriptor instead.
func (*TestBoolMap) Descriptor() ([]byte, []int) {
	return file_Test_proto_rawDescGZIP(), []int{1}
}

func (x *TestBoolMap) GetId() bool {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return false
}

func (x *TestBoolMap) GetAddition() string {
	if x != nil && x.Addition != nil {
		return *x.Addition
	}
	return ""
}

type TestI32Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Addition *string `protobuf:"bytes,2,opt,name=addition,proto3,oneof" json:"addition,omitempty"`
}

func (x *TestI32Map) Reset() {
	*x = TestI32Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestI32Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestI32Map) ProtoMessage() {}

func (x *TestI32Map) ProtoReflect() protoreflect.Message {
	mi := &file_Test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestI32Map.ProtoReflect.Descriptor instead.
func (*TestI32Map) Descriptor() ([]byte, []int) {
	return file_Test_proto_rawDescGZIP(), []int{2}
}

func (x *TestI32Map) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TestI32Map) GetAddition() string {
	if x != nil && x.Addition != nil {
		return *x.Addition
	}
	return ""
}

type TestI64Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int64  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Addition *string `protobuf:"bytes,2,opt,name=addition,proto3,oneof" json:"addition,omitempty"`
}

func (x *TestI64Map) Reset() {
	*x = TestI64Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestI64Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestI64Map) ProtoMessage() {}

func (x *TestI64Map) ProtoReflect() protoreflect.Message {
	mi := &file_Test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestI64Map.ProtoReflect.Descriptor instead.
func (*TestI64Map) Descriptor() ([]byte, []int) {
	return file_Test_proto_rawDescGZIP(), []int{3}
}

func (x *TestI64Map) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TestI64Map) GetAddition() string {
	if x != nil && x.Addition != nil {
		return *x.Addition
	}
	return ""
}

type TestStringMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Addition *string `protobuf:"bytes,2,opt,name=addition,proto3,oneof" json:"addition,omitempty"`
}

func (x *TestStringMap) Reset() {
	*x = TestStringMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestStringMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStringMap) ProtoMessage() {}

func (x *TestStringMap) ProtoReflect() protoreflect.Message {
	mi := &file_Test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestStringMap.ProtoReflect.Descriptor instead.
func (*TestStringMap) Descriptor() ([]byte, []int) {
	return file_Test_proto_rawDescGZIP(), []int{4}
}

func (x *TestStringMap) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *TestStringMap) GetAddition() string {
	if x != nil && x.Addition != nil {
		return *x.Addition
	}
	return ""
}

type TestU32Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Addition *string `protobuf:"bytes,2,opt,name=addition,proto3,oneof" json:"addition,omitempty"`
}

func (x *TestU32Map) Reset() {
	*x = TestU32Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestU32Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestU32Map) ProtoMessage() {}

func (x *TestU32Map) ProtoReflect() protoreflect.Message {
	mi := &file_Test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestU32Map.ProtoReflect.Descriptor instead.
func (*TestU32Map) Descriptor() ([]byte, []int) {
	return file_Test_proto_rawDescGZIP(), []int{5}
}

func (x *TestU32Map) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TestU32Map) GetAddition() string {
	if x != nil && x.Addition != nil {
		return *x.Addition
	}
	return ""
}

type TestU64Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Addition *string `protobuf:"bytes,2,opt,name=addition,proto3,oneof" json:"addition,omitempty"`
}

func (x *TestU64Map) Reset() {
	*x = TestU64Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestU64Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestU64Map) ProtoMessage() {}

func (x *TestU64Map) ProtoReflect() protoreflect.Message {
	mi := &file_Test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestU64Map.ProtoReflect.Descriptor instead.
func (*TestU64Map) Descriptor() ([]byte, []int) {
	return file_Test_proto_rawDescGZIP(), []int{6}
}

func (x *TestU64Map) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TestU64Map) GetAddition() string {
	if x != nil && x.Addition != nil {
		return *x.Addition
	}
	return ""
}

var File_Test_proto protoreflect.FileDescriptor

var file_Test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x09, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x03, 0x75, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x36, 0x34,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x03, 0x69, 0x36, 0x34, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52,
	0x03, 0x75, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x01, 0x62, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x01, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x05, 0x52, 0x01, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x74, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x03, 0x73, 0x74, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x07, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x33, 0x32, 0x41, 0x72, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x33, 0x32, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x33, 0x32, 0x41,
	0x72, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x33, 0x32, 0x41, 0x72, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x36, 0x34, 0x41, 0x72, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x06, 0x69, 0x36, 0x34, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x36, 0x34, 0x41,
	0x72, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x75, 0x36, 0x34, 0x41, 0x72, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x08, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x65, 0x6e,
	0x75, 0x6d, 0x41, 0x72, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x75, 0x6d, 0x41, 0x72, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x41, 0x72, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x41, 0x72, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x69, 0x33, 0x32, 0x4d,
	0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x33, 0x32,
	0x4d, 0x61, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x75, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x33, 0x32, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x75, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x29,
	0x0a, 0x06, 0x69, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x69, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x75, 0x36, 0x34,
	0x4d, 0x61, 0x70, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x75, 0x36,
	0x34, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x4d,
	0x61, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x15, 0x0a,
	0x03, 0x66, 0x33, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x03, 0x66, 0x33,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x09, 0x52, 0x03, 0x66, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x33, 0x32, 0x41, 0x72, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x66, 0x33, 0x32,
	0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x36, 0x34, 0x41, 0x72, 0x72, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x06, 0x66, 0x36, 0x34, 0x41, 0x72, 0x72, 0x1a, 0x46, 0x0a, 0x0b, 0x49,
	0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x0b, 0x55, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x55, 0x33, 0x32, 0x4d, 0x61, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x0b, 0x49,
	0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x0b, 0x55, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x55, 0x36, 0x34, 0x4d, 0x61, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x0c, 0x42,
	0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x04, 0xc0, 0xc1, 0x18, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x33, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x36, 0x34, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x36, 0x34, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x62, 0x42, 0x04, 0x0a, 0x02, 0x5f,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x74, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x62,
	0x6a, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x33, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x36,
	0x34, 0x22, 0x5d, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x04, 0xc8, 0xc1, 0x18, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x5c, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x3a, 0x04, 0xc8, 0xc1, 0x18, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c,
	0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x3a, 0x04, 0xc8, 0xc1, 0x18, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x0d,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x3a, 0x04, 0xc8, 0xc1, 0x18, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x3a, 0x04, 0xc8, 0xc1, 0x18, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x55, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a,
	0x04, 0xc8, 0xc1, 0x18, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2e, 0x2f,
	0x70, 0x62, 0x67, 0x65, 0x6e, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Test_proto_rawDescOnce sync.Once
	file_Test_proto_rawDescData = file_Test_proto_rawDesc
)

func file_Test_proto_rawDescGZIP() []byte {
	file_Test_proto_rawDescOnce.Do(func() {
		file_Test_proto_rawDescData = protoimpl.X.CompressGZIP(file_Test_proto_rawDescData)
	})
	return file_Test_proto_rawDescData
}

var file_Test_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_Test_proto_goTypes = []any{
	(*Test)(nil),          // 0: Test
	(*TestBoolMap)(nil),   // 1: TestBoolMap
	(*TestI32Map)(nil),    // 2: TestI32Map
	(*TestI64Map)(nil),    // 3: TestI64Map
	(*TestStringMap)(nil), // 4: TestStringMap
	(*TestU32Map)(nil),    // 5: TestU32Map
	(*TestU64Map)(nil),    // 6: TestU64Map
	nil,                   // 7: Test.I32MapEntry
	nil,                   // 8: Test.U32MapEntry
	nil,                   // 9: Test.I64MapEntry
	nil,                   // 10: Test.U64MapEntry
	nil,                   // 11: Test.BoolMapEntry
	nil,                   // 12: Test.StrMapEntry
	(ColorType)(0),        // 13: ColorType
	(*Person)(nil),        // 14: Person
}
var file_Test_proto_depIdxs = []int32{
	13, // 0: Test.e:type_name -> ColorType
	14, // 1: Test.obj:type_name -> Person
	13, // 2: Test.enumArr:type_name -> ColorType
	7,  // 3: Test.i32Map:type_name -> Test.I32MapEntry
	8,  // 4: Test.u32Map:type_name -> Test.U32MapEntry
	9,  // 5: Test.i64Map:type_name -> Test.I64MapEntry
	10, // 6: Test.u64Map:type_name -> Test.U64MapEntry
	11, // 7: Test.boolMap:type_name -> Test.BoolMapEntry
	12, // 8: Test.strMap:type_name -> Test.StrMapEntry
	2,  // 9: Test.I32MapEntry.value:type_name -> TestI32Map
	5,  // 10: Test.U32MapEntry.value:type_name -> TestU32Map
	3,  // 11: Test.I64MapEntry.value:type_name -> TestI64Map
	6,  // 12: Test.U64MapEntry.value:type_name -> TestU64Map
	1,  // 13: Test.BoolMapEntry.value:type_name -> TestBoolMap
	4,  // 14: Test.StrMapEntry.value:type_name -> TestStringMap
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_Test_proto_init() }
func file_Test_proto_init() {
	if File_Test_proto != nil {
		return
	}
	file_ColorType_proto_init()
	file_Person_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Test_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Test_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TestBoolMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Test_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TestI32Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Test_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TestI64Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Test_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TestStringMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Test_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TestU32Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Test_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TestU64Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Test_proto_msgTypes[0].OneofWrappers = []any{}
	file_Test_proto_msgTypes[1].OneofWrappers = []any{}
	file_Test_proto_msgTypes[2].OneofWrappers = []any{}
	file_Test_proto_msgTypes[3].OneofWrappers = []any{}
	file_Test_proto_msgTypes[4].OneofWrappers = []any{}
	file_Test_proto_msgTypes[5].OneofWrappers = []any{}
	file_Test_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Test_proto_goTypes,
		DependencyIndexes: file_Test_proto_depIdxs,
		MessageInfos:      file_Test_proto_msgTypes,
	}.Build()
	File_Test_proto = out.File
	file_Test_proto_rawDesc = nil
	file_Test_proto_goTypes = nil
	file_Test_proto_depIdxs = nil
}
