package pbgen

//this file is generated by gsync, do not modify it manually !!!

import "github.com/yaoguangduan/protosync/syncdep"
import "google.golang.org/protobuf/encoding/protowire"

type ActionInfoSync struct {
	act            string
	actINDEX       int
	detail         string
	detailINDEX    int
	time           int64
	timeINDEX      int
	dirtyFieldMark []uint8
	parent         syncdep.Sync
	indexInParent  int
}

func NewActionInfoSync() *ActionInfoSync {
	return &ActionInfoSync{
		actINDEX:       0,
		detailINDEX:    1,
		timeINDEX:      2,
		dirtyFieldMark: make([]uint8, 1),
	}
}
func (x *ActionInfoSync) Clear() *ActionInfoSync {
	x.SetAct("")
	x.SetDetail("")
	x.SetTime(0)
	return x
}
func (x *ActionInfoSync) CopyToPb(r *ActionInfo) *ActionInfoSync {
	r.SetAct(x.act)
	r.SetDetail(x.detail)
	r.SetTime(x.time)
	return x
}
func (x *ActionInfoSync) CopyFromPb(r *ActionInfo) *ActionInfoSync {
	if r.Act != nil {
		x.SetAct(*r.Act)
	}
	if r.Detail != nil {
		x.SetDetail(*r.Detail)
	}
	if r.Time != nil {
		x.SetTime(*r.Time)
	}
	return x
}
func (x *ActionInfoSync) MergeDirtyFromPb(r *ActionInfo) {
	if r.Act != nil {
		x.SetAct(*r.Act)
	}
	if r.Detail != nil {
		x.SetDetail(*r.Detail)
	}
	if r.Time != nil {
		x.SetTime(*r.Time)
	}
}
func (x *ActionInfoSync) MergeDirtyFromBytes(buf []byte) *ActionInfoSync {
	fds := syncdep.PreUnmarshal(buf)
	for _, rawF := range fds.Values {
		switch rawF.Number {
		case 1:
			x.SetAct(syncdep.Bys2Str(rawF.Value.([]byte)))
		case 2:
			x.SetDetail(syncdep.Bys2Str(rawF.Value.([]byte)))
		case 3:
			x.SetTime(int64(rawF.Value.(uint64)))
		}
	}
	return x
}
func (x *ActionInfoSync) MergeDirtyToBytes() []byte {
	var buf []byte
	if x.isActDirty() {
		buf = protowire.AppendTag(buf, 1, 2)
		buf = syncdep.AppendFieldValue(buf, x.act)
	}
	if x.isDetailDirty() {
		buf = protowire.AppendTag(buf, 2, 2)
		buf = syncdep.AppendFieldValue(buf, x.detail)
	}
	if x.isTimeDirty() {
		buf = protowire.AppendTag(buf, 3, 0)
		buf = syncdep.AppendFieldValue(buf, x.time)
	}
	return buf
}
func (x *ActionInfoSync) MergeDirtyToPb(r *ActionInfo) {
	if x.isActDirty() {
		r.SetAct(x.act)
	}
	if x.isDetailDirty() {
		r.SetDetail(x.detail)
	}
	if x.isTimeDirty() {
		r.SetTime(x.time)
	}
}
func (x *ActionInfoSync) SetDirty(index int, dirty bool, sync syncdep.Sync) {
	idx := index >> 3
	off := index & 7
	if dirty {
		x.dirtyFieldMark[idx] = x.dirtyFieldMark[idx] | (1 << off)
		x.SetParentDirty()
	} else {
		x.dirtyFieldMark[idx] = x.dirtyFieldMark[idx] & ^(1 << off)
	}
}
func (x *ActionInfoSync) SetParentDirty() {
	if x.parent != nil {
		x.parent.SetDirty(x.indexInParent, true, x)
	}
}
func (x *ActionInfoSync) SetParent(sync syncdep.Sync, idx int) {
	x.parent = sync
	x.indexInParent = idx
}
func (x *ActionInfoSync) FlushDirty(dirty bool) {
	if dirty || x.isActDirty() {
		x.setActDirty(dirty, true)
	}
	if dirty || x.isDetailDirty() {
		x.setDetailDirty(dirty, true)
	}
	if dirty || x.isTimeDirty() {
		x.setTimeDirty(dirty, true)
	}
}
func (x *ActionInfoSync) setActDirty(dirty bool, recur bool) {
	x.SetDirty(x.actINDEX, dirty, x)
}
func (x *ActionInfoSync) isActDirty() bool {
	idx := x.actINDEX >> 3
	off := x.actINDEX & 7
	return (x.dirtyFieldMark[idx] & (1 << off)) != 0
}
func (x *ActionInfoSync) setDetailDirty(dirty bool, recur bool) {
	x.SetDirty(x.detailINDEX, dirty, x)
}
func (x *ActionInfoSync) isDetailDirty() bool {
	idx := x.detailINDEX >> 3
	off := x.detailINDEX & 7
	return (x.dirtyFieldMark[idx] & (1 << off)) != 0
}
func (x *ActionInfoSync) setTimeDirty(dirty bool, recur bool) {
	x.SetDirty(x.timeINDEX, dirty, x)
}
func (x *ActionInfoSync) isTimeDirty() bool {
	idx := x.timeINDEX >> 3
	off := x.timeINDEX & 7
	return (x.dirtyFieldMark[idx] & (1 << off)) != 0
}
func (x *ActionInfoSync) Key() interface{} {
	return x.act
}
func (x *ActionInfoSync) SetKey(v interface{}) {
	if x.parent != nil {
		if _, ok := x.parent.(*syncdep.MapSync[string, *ActionInfoSync]); ok {
			panic("ActionInfoSync key can not set")
		}
	}
	x.act = v.(string)
}
func (x *ActionInfoSync) GetAct() string {
	return x.act
}
func (x *ActionInfoSync) SetAct(v string) *ActionInfoSync {
	if x.act == v {
		return x
	}
	x.act = v
	x.setActDirty(true, false)
	return x
}
func (x *ActionInfoSync) GetDetail() string {
	return x.detail
}
func (x *ActionInfoSync) SetDetail(v string) *ActionInfoSync {
	if x.detail == v {
		return x
	}
	x.detail = v
	x.setDetailDirty(true, false)
	return x
}
func (x *ActionInfoSync) GetTime() int64 {
	return x.time
}
func (x *ActionInfoSync) SetTime(v int64) *ActionInfoSync {
	if x.time == v {
		return x
	}
	x.time = v
	x.setTimeDirty(true, false)
	return x
}
func (xs *ActionInfo) SetAct(v string) {
	xs.Act = &v
}
func (xs *ActionInfo) SetDetail(v string) {
	xs.Detail = &v
}
func (xs *ActionInfo) SetTime(v int64) {
	xs.Time = &v
}
func (xs *ActionInfo) Unmarshal(buf []byte) error {
	for len(buf) > 0 {
		number, _, n := protowire.ConsumeTag(buf)
		if n < 0 {
			return protowire.ParseError(n)
		}
		buf = buf[n:]
		switch number {
		case 1:
			v, n := protowire.ConsumeBytes(buf)
			if n < 0 {
				return protowire.ParseError(n)
			}
			buf = buf[n:]
			xs.SetAct(syncdep.Bys2Str(v))
			break
		case 2:
			v, n := protowire.ConsumeBytes(buf)
			if n < 0 {
				return protowire.ParseError(n)
			}
			buf = buf[n:]
			xs.SetDetail(syncdep.Bys2Str(v))
			break
		case 3:
			v, n := protowire.ConsumeVarint(buf)
			if n < 0 {
				return protowire.ParseError(n)
			}
			buf = buf[n:]
			xs.SetTime(int64(v))
			break
		}
	}
	return nil
}
func (xs *ActionInfo) Marshal() []byte {
	var buf []byte
	if xs.Act != nil {
		buf = protowire.AppendTag(buf, 1, protowire.BytesType)
		buf = protowire.AppendString(buf, *xs.Act)
	}
	if xs.Detail != nil {
		buf = protowire.AppendTag(buf, 2, protowire.BytesType)
		buf = protowire.AppendString(buf, *xs.Detail)
	}
	if xs.Time != nil {
		buf = protowire.AppendTag(buf, 3, protowire.VarintType)
		buf = protowire.AppendVarint(buf, uint64(*xs.Time))
	}
	return buf
}
