// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: Test.proto

package pbgen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *int32           `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	U32            *uint32          `protobuf:"varint,2,opt,name=u32,proto3,oneof" json:"u32,omitempty"`
	I64            *int64           `protobuf:"varint,3,opt,name=i64,proto3,oneof" json:"i64,omitempty"`
	U64            *uint64          `protobuf:"varint,4,opt,name=u64,proto3,oneof" json:"u64,omitempty"`
	B              *bool            `protobuf:"varint,5,opt,name=b,proto3,oneof" json:"b,omitempty"`
	E              *ColorType       `protobuf:"varint,6,opt,name=e,proto3,enum=ColorType,oneof" json:"e,omitempty"`
	Str            *string          `protobuf:"bytes,7,opt,name=str,proto3,oneof" json:"str,omitempty"`
	Obj            *Person          `protobuf:"bytes,22,opt,name=obj,proto3,oneof" json:"obj,omitempty"`
	I32Arr         []int32          `protobuf:"varint,8,rep,packed,name=i32Arr,proto3" json:"i32Arr,omitempty"`
	I32ArrCleared  bool             `protobuf:"varint,2008,opt,name=i32ArrCleared,proto3" json:"i32ArrCleared,omitempty"`
	U32Arr         []uint32         `protobuf:"varint,9,rep,packed,name=u32Arr,proto3" json:"u32Arr,omitempty"`
	U32ArrCleared  bool             `protobuf:"varint,2009,opt,name=u32ArrCleared,proto3" json:"u32ArrCleared,omitempty"`
	I64Arr         []int64          `protobuf:"varint,10,rep,packed,name=i64Arr,proto3" json:"i64Arr,omitempty"`
	I64ArrCleared  bool             `protobuf:"varint,2010,opt,name=i64ArrCleared,proto3" json:"i64ArrCleared,omitempty"`
	U64Arr         []uint64         `protobuf:"varint,11,rep,packed,name=u64Arr,proto3" json:"u64Arr,omitempty"`
	U64ArrCleared  bool             `protobuf:"varint,2011,opt,name=u64ArrCleared,proto3" json:"u64ArrCleared,omitempty"`
	BoolArr        []bool           `protobuf:"varint,12,rep,packed,name=boolArr,proto3" json:"boolArr,omitempty"`
	BoolArrCleared bool             `protobuf:"varint,2012,opt,name=boolArrCleared,proto3" json:"boolArrCleared,omitempty"`
	EnumArr        []ColorType      `protobuf:"varint,13,rep,packed,name=enumArr,proto3,enum=ColorType" json:"enumArr,omitempty"`
	EnumArrCleared bool             `protobuf:"varint,2013,opt,name=enumArrCleared,proto3" json:"enumArrCleared,omitempty"`
	StrArr         []string         `protobuf:"bytes,14,rep,name=strArr,proto3" json:"strArr,omitempty"`
	StrArrCleared  bool             `protobuf:"varint,2014,opt,name=strArrCleared,proto3" json:"strArrCleared,omitempty"`
	I32Map         []*TestI32Map    `protobuf:"bytes,15,rep,name=i32Map,proto3" json:"i32Map,omitempty"`
	I32MapDeleted  []int32          `protobuf:"varint,1015,rep,packed,name=i32MapDeleted,proto3" json:"i32MapDeleted,omitempty"`
	U32Map         []*TestU32Map    `protobuf:"bytes,16,rep,name=u32Map,proto3" json:"u32Map,omitempty"`
	U32MapDeleted  []uint32         `protobuf:"varint,1016,rep,packed,name=u32MapDeleted,proto3" json:"u32MapDeleted,omitempty"`
	I64Map         []*TestI64Map    `protobuf:"bytes,17,rep,name=i64Map,proto3" json:"i64Map,omitempty"`
	I64MapDeleted  []int64          `protobuf:"varint,1017,rep,packed,name=i64MapDeleted,proto3" json:"i64MapDeleted,omitempty"`
	U64Map         []*TestU64Map    `protobuf:"bytes,18,rep,name=u64Map,proto3" json:"u64Map,omitempty"`
	U64MapDeleted  []uint64         `protobuf:"varint,1018,rep,packed,name=u64MapDeleted,proto3" json:"u64MapDeleted,omitempty"`
	BoolMap        []*TestBoolMap   `protobuf:"bytes,19,rep,name=boolMap,proto3" json:"boolMap,omitempty"`
	BoolMapDeleted []bool           `protobuf:"varint,1019,rep,packed,name=boolMapDeleted,proto3" json:"boolMapDeleted,omitempty"`
	StrMap         []*TestStringMap `protobuf:"bytes,21,rep,name=strMap,proto3" json:"strMap,omitempty"`
	StrMapDeleted  []string         `protobuf:"bytes,1021,rep,name=strMapDeleted,proto3" json:"strMapDeleted,omitempty"`
	F32            *float32         `protobuf:"fixed32,23,opt,name=f32,proto3,oneof" json:"f32,omitempty"`
	F64            *float64         `protobuf:"fixed64,24,opt,name=f64,proto3,oneof" json:"f64,omitempty"`
	F32Arr         []float32        `protobuf:"fixed32,25,rep,packed,name=f32Arr,proto3" json:"f32Arr,omitempty"`
	F32ArrCleared  bool             `protobuf:"varint,2025,opt,name=f32ArrCleared,proto3" json:"f32ArrCleared,omitempty"`
	F64Arr         []float64        `protobuf:"fixed64,26,rep,packed,name=f64Arr,proto3" json:"f64Arr,omitempty"`
	F64ArrCleared  bool             `protobuf:"varint,2026,opt,name=f64ArrCleared,proto3" json:"f64ArrCleared,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_Test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_Test_proto_rawDescGZIP(), []int{0}
}

func (x *Test) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Test) GetU32() uint32 {
	if x != nil && x.U32 != nil {
		return *x.U32
	}
	return 0
}

func (x *Test) GetI64() int64 {
	if x != nil && x.I64 != nil {
		return *x.I64
	}
	return 0
}

func (x *Test) GetU64() uint64 {
	if x != nil && x.U64 != nil {
		return *x.U64
	}
	return 0
}

func (x *Test) GetB() bool {
	if x != nil && x.B != nil {
		return *x.B
	}
	return false
}

func (x *Test) GetE() ColorType {
	if x != nil && x.E != nil {
		return *x.E
	}
	return ColorType_Red
}

func (x *Test) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *Test) GetObj() *Person {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *Test) GetI32Arr() []int32 {
	if x != nil {
		return x.I32Arr
	}
	return nil
}

func (x *Test) GetI32ArrCleared() bool {
	if x != nil {
		return x.I32ArrCleared
	}
	return false
}

func (x *Test) GetU32Arr() []uint32 {
	if x != nil {
		return x.U32Arr
	}
	return nil
}

func (x *Test) GetU32ArrCleared() bool {
	if x != nil {
		return x.U32ArrCleared
	}
	return false
}

func (x *Test) GetI64Arr() []int64 {
	if x != nil {
		return x.I64Arr
	}
	return nil
}

func (x *Test) GetI64ArrCleared() bool {
	if x != nil {
		return x.I64ArrCleared
	}
	return false
}

func (x *Test) GetU64Arr() []uint64 {
	if x != nil {
		return x.U64Arr
	}
	return nil
}

func (x *Test) GetU64ArrCleared() bool {
	if x != nil {
		return x.U64ArrCleared
	}
	return false
}

func (x *Test) GetBoolArr() []bool {
	if x != nil {
		return x.BoolArr
	}
	return nil
}

func (x *Test) GetBoolArrCleared() bool {
	if x != nil {
		return x.BoolArrCleared
	}
	return false
}

func (x *Test) GetEnumArr() []ColorType {
	if x != nil {
		return x.EnumArr
	}
	return nil
}

func (x *Test) GetEnumArrCleared() bool {
	if x != nil {
		return x.EnumArrCleared
	}
	return false
}

func (x *Test) GetStrArr() []string {
	if x != nil {
		return x.StrArr
	}
	return nil
}

func (x *Test) GetStrArrCleared() bool {
	if x != nil {
		return x.StrArrCleared
	}
	return false
}

func (x *Test) GetI32Map() []*TestI32Map {
	if x != nil {
		return x.I32Map
	}
	return nil
}

func (x *Test) GetI32MapDeleted() []int32 {
	if x != nil {
		return x.I32MapDeleted
	}
	return nil
}

func (x *Test) GetU32Map() []*TestU32Map {
	if x != nil {
		return x.U32Map
	}
	return nil
}

func (x *Test) GetU32MapDeleted() []uint32 {
	if x != nil {
		return x.U32MapDeleted
	}
	return nil
}

func (x *Test) GetI64Map() []*TestI64Map {
	if x != nil {
		return x.I64Map
	}
	return nil
}

func (x *Test) GetI64MapDeleted() []int64 {
	if x != nil {
		return x.I64MapDeleted
	}
	return nil
}

func (x *Test) GetU64Map() []*TestU64Map {
	if x != nil {
		return x.U64Map
	}
	return nil
}

func (x *Test) GetU64MapDeleted() []uint64 {
	if x != nil {
		return x.U64MapDeleted
	}
	return nil
}

func (x *Test) GetBoolMap() []*TestBoolMap {
	if x != nil {
		return x.BoolMap
	}
	return nil
}

func (x *Test) GetBoolMapDeleted() []bool {
	if x != nil {
		return x.BoolMapDeleted
	}
	return nil
}

func (x *Test) GetStrMap() []*TestStringMap {
	if x != nil {
		return x.StrMap
	}
	return nil
}

func (x *Test) GetStrMapDeleted() []string {
	if x != nil {
		return x.StrMapDeleted
	}
	return nil
}

func (x *Test) GetF32() float32 {
	if x != nil && x.F32 != nil {
		return *x.F32
	}
	return 0
}

func (x *Test) GetF64() float64 {
	if x != nil && x.F64 != nil {
		return *x.F64
	}
	return 0
}

func (x *Test) GetF32Arr() []float32 {
	if x != nil {
		return x.F32Arr
	}
	return nil
}

func (x *Test) GetF32ArrCleared() bool {
	if x != nil {
		return x.F32ArrCleared
	}
	return false
}

func (x *Test) GetF64Arr() []float64 {
	if x != nil {
		return x.F64Arr
	}
	return nil
}

func (x *Test) GetF64ArrCleared() bool {
	if x != nil {
		return x.F64ArrCleared
	}
	return false
}

var File_Test_proto protoreflect.FileDescriptor

var file_Test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x49, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x55, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x49, 0x36, 0x34, 0x4d, 0x61, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x55, 0x36, 0x34, 0x4d,
	0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x0a, 0x0a, 0x04,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x33, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x03, 0x75, 0x33, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x03, 0x69, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x03, 0x75, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x11,
	0x0a, 0x01, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x01, 0x62, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x01, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x01, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x03, 0x73, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x07, 0x52,
	0x03, 0x6f, 0x62, 0x6a, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x33, 0x32, 0x41, 0x72,
	0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x69, 0x33, 0x32, 0x41, 0x72, 0x72, 0x12,
	0x25, 0x0a, 0x0d, 0x69, 0x33, 0x32, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64,
	0x18, 0xd8, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x33, 0x32, 0x41, 0x72, 0x72, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x33, 0x32, 0x41, 0x72, 0x72,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x33, 0x32, 0x41, 0x72, 0x72, 0x12, 0x25,
	0x0a, 0x0d, 0x75, 0x33, 0x32, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18,
	0xd9, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x33, 0x32, 0x41, 0x72, 0x72, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x36, 0x34, 0x41, 0x72, 0x72, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69, 0x36, 0x34, 0x41, 0x72, 0x72, 0x12, 0x25, 0x0a,
	0x0d, 0x69, 0x36, 0x34, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0xda,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x36, 0x34, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x36, 0x34, 0x41, 0x72, 0x72, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x75, 0x36, 0x34, 0x41, 0x72, 0x72, 0x12, 0x25, 0x0a, 0x0d,
	0x75, 0x36, 0x34, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0xdb, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x36, 0x34, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x12, 0x27, 0x0a,
	0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18,
	0xdc, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x65, 0x6e, 0x75, 0x6d, 0x41, 0x72,
	0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x12, 0x27, 0x0a, 0x0e,
	0x65, 0x6e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0xdd,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x41, 0x72, 0x72, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x41, 0x72, 0x72, 0x12, 0x25, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0xde,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x69, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x33, 0x32, 0x4d, 0x61,
	0x70, 0x52, 0x06, 0x69, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x33, 0x32,
	0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0xf7, 0x07, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0d, 0x69, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x06, 0x75, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x55, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x75,
	0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x0d, 0x75, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0xf8, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x75,
	0x33, 0x32, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x06,
	0x69, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x69, 0x36, 0x34, 0x4d, 0x61,
	0x70, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0xf9, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x36, 0x34, 0x4d, 0x61,
	0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x75, 0x36, 0x34, 0x4d,
	0x61, 0x70, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x55,
	0x36, 0x34, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x75, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x0a,
	0x0d, 0x75, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0xfa,
	0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x75, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6c,
	0x4d, 0x61, 0x70, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x27, 0x0a, 0x0e,
	0x62, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0xfb,
	0x07, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x73, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0xfd,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x08, 0x52, 0x03, 0x66, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66,
	0x36, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x03, 0x66, 0x36, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x33, 0x32, 0x41, 0x72, 0x72, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x06, 0x66, 0x33, 0x32, 0x41, 0x72, 0x72, 0x12, 0x25, 0x0a, 0x0d, 0x66, 0x33,
	0x32, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0xe9, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x66, 0x33, 0x32, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x36, 0x34, 0x41, 0x72, 0x72, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x06, 0x66, 0x36, 0x34, 0x41, 0x72, 0x72, 0x12, 0x25, 0x0a, 0x0d, 0x66, 0x36, 0x34,
	0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0xea, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x66, 0x36, 0x34, 0x41, 0x72, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x33, 0x32, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x69, 0x36, 0x34, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x36, 0x34, 0x42,
	0x04, 0x0a, 0x02, 0x5f, 0x62, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x73, 0x74, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x62, 0x6a, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x66, 0x33, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x36, 0x34, 0x42, 0x0a, 0x5a, 0x08, 0x2e,
	0x2e, 0x2f, 0x70, 0x62, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Test_proto_rawDescOnce sync.Once
	file_Test_proto_rawDescData = file_Test_proto_rawDesc
)

func file_Test_proto_rawDescGZIP() []byte {
	file_Test_proto_rawDescOnce.Do(func() {
		file_Test_proto_rawDescData = protoimpl.X.CompressGZIP(file_Test_proto_rawDescData)
	})
	return file_Test_proto_rawDescData
}

var file_Test_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_Test_proto_goTypes = []any{
	(*Test)(nil),          // 0: Test
	(ColorType)(0),        // 1: ColorType
	(*Person)(nil),        // 2: Person
	(*TestI32Map)(nil),    // 3: TestI32Map
	(*TestU32Map)(nil),    // 4: TestU32Map
	(*TestI64Map)(nil),    // 5: TestI64Map
	(*TestU64Map)(nil),    // 6: TestU64Map
	(*TestBoolMap)(nil),   // 7: TestBoolMap
	(*TestStringMap)(nil), // 8: TestStringMap
}
var file_Test_proto_depIdxs = []int32{
	1, // 0: Test.e:type_name -> ColorType
	2, // 1: Test.obj:type_name -> Person
	1, // 2: Test.enumArr:type_name -> ColorType
	3, // 3: Test.i32Map:type_name -> TestI32Map
	4, // 4: Test.u32Map:type_name -> TestU32Map
	5, // 5: Test.i64Map:type_name -> TestI64Map
	6, // 6: Test.u64Map:type_name -> TestU64Map
	7, // 7: Test.boolMap:type_name -> TestBoolMap
	8, // 8: Test.strMap:type_name -> TestStringMap
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_Test_proto_init() }
func file_Test_proto_init() {
	if File_Test_proto != nil {
		return
	}
	file_TestStringMap_proto_init()
	file_ColorType_proto_init()
	file_Person_proto_init()
	file_TestI32Map_proto_init()
	file_TestU32Map_proto_init()
	file_TestI64Map_proto_init()
	file_TestU64Map_proto_init()
	file_TestBoolMap_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Test_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Test_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Test_proto_goTypes,
		DependencyIndexes: file_Test_proto_depIdxs,
		MessageInfos:      file_Test_proto_msgTypes,
	}.Build()
	File_Test_proto = out.File
	file_Test_proto_rawDesc = nil
	file_Test_proto_goTypes = nil
	file_Test_proto_depIdxs = nil
}
