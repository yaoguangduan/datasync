package pbgen

//this file is generated by gsync, do not modify it manually !!!

import "gpsync/syncdep"
import "google.golang.org/protobuf/encoding/protowire"

type TestBoolMapSync struct {
	id             bool
	idINDEX        int
	addition       string
	additionINDEX  int
	dirtyFieldMark []uint8
	parent         syncdep.Sync
	indexInParent  int
}

func NewTestBoolMapSync() *TestBoolMapSync {
	return &TestBoolMapSync{
		idINDEX:        0,
		additionINDEX:  1,
		dirtyFieldMark: make([]uint8, 1),
	}
}
func (x *TestBoolMapSync) Clear() *TestBoolMapSync {
	x.SetId(false)
	x.SetAddition("")
	return x
}
func (x *TestBoolMapSync) CopyToPb(r *TestBoolMap) *TestBoolMapSync {
	r.SetId(x.id)
	r.SetAddition(x.addition)
	return x
}
func (x *TestBoolMapSync) CopyFromPb(r *TestBoolMap) *TestBoolMapSync {
	if r.Id != nil {
		x.SetId(*r.Id)
	}
	if r.Addition != nil {
		x.SetAddition(*r.Addition)
	}
	return x
}
func (x *TestBoolMapSync) MergeDirtyFromPb(r *TestBoolMap) {
	if r.Id != nil {
		x.SetId(*r.Id)
	}
	if r.Addition != nil {
		x.SetAddition(*r.Addition)
	}
}
func (x *TestBoolMapSync) MergeDirtyFromBytes(buf []byte) *TestBoolMapSync {
	fds := syncdep.PreParseProtoBytes(buf)
	for _, rawF := range fds.Values {
		switch rawF.Number {
		case 1:
			x.SetId(rawF.Value.(uint64) > 0)
		case 2:
			x.SetAddition(syncdep.Bys2Str(rawF.Value.([]byte)))
		}
	}
	return x
}
func (x *TestBoolMapSync) MergeDirtyToBytes() []byte {
	var buf []byte
	if x.isIdDirty() {
		buf = protowire.AppendTag(buf, 1, 0)
		buf = syncdep.AppendFieldValue(buf, x.id)
	}
	if x.isAdditionDirty() {
		buf = protowire.AppendTag(buf, 2, 2)
		buf = syncdep.AppendFieldValue(buf, x.addition)
	}
	return buf
}
func (x *TestBoolMapSync) MergeDirtyToPb(r *TestBoolMap) {
	if x.isIdDirty() {
		r.SetId(x.id)
	}
	if x.isAdditionDirty() {
		r.SetAddition(x.addition)
	}
}
func (x *TestBoolMapSync) SetDirty(index int, dirty bool, sync syncdep.Sync) {
	idx := index >> 3
	off := index & 7
	if dirty {
		x.dirtyFieldMark[idx] = x.dirtyFieldMark[idx] | (1 << off)
		x.SetParentDirty()
	} else {
		x.dirtyFieldMark[idx] = x.dirtyFieldMark[idx] & ^(1 << off)
	}
}
func (x *TestBoolMapSync) SetParentDirty() {
	if x.parent != nil {
		x.parent.SetDirty(x.indexInParent, true, x)
	}
}
func (x *TestBoolMapSync) SetParent(sync syncdep.Sync, idx int) {
	x.parent = sync
	x.indexInParent = idx
}
func (x *TestBoolMapSync) FlushDirty(dirty bool) {
	if dirty || x.isIdDirty() {
		x.setIdDirty(dirty, true)
	}
	if dirty || x.isAdditionDirty() {
		x.setAdditionDirty(dirty, true)
	}
}
func (x *TestBoolMapSync) setIdDirty(dirty bool, recur bool) {
	x.SetDirty(x.idINDEX, dirty, x)
}
func (x *TestBoolMapSync) isIdDirty() bool {
	idx := x.idINDEX >> 3
	off := x.idINDEX & 7
	return (x.dirtyFieldMark[idx] & (1 << off)) != 0
}
func (x *TestBoolMapSync) setAdditionDirty(dirty bool, recur bool) {
	x.SetDirty(x.additionINDEX, dirty, x)
}
func (x *TestBoolMapSync) isAdditionDirty() bool {
	idx := x.additionINDEX >> 3
	off := x.additionINDEX & 7
	return (x.dirtyFieldMark[idx] & (1 << off)) != 0
}
func (x *TestBoolMapSync) Key() interface{} {
	return x.id
}
func (x *TestBoolMapSync) SetKey(v interface{}) {
	if x.parent != nil {
		if _, ok := x.parent.(*syncdep.MapSync[bool, *TestBoolMapSync]); ok {
			panic("TestBoolMapSync key can not set")
		}
	}
	x.id = v.(bool)
}
func (x *TestBoolMapSync) GetId() bool {
	return x.id
}
func (x *TestBoolMapSync) SetId(v bool) *TestBoolMapSync {
	if x.id == v {
		return x
	}
	x.id = v
	x.setIdDirty(true, false)
	return x
}
func (x *TestBoolMapSync) GetAddition() string {
	return x.addition
}
func (x *TestBoolMapSync) SetAddition(v string) *TestBoolMapSync {
	if x.addition == v {
		return x
	}
	x.addition = v
	x.setAdditionDirty(true, false)
	return x
}
func (xs *TestBoolMap) SetId(v bool) {
	xs.Id = &v
}
func (xs *TestBoolMap) SetAddition(v string) {
	xs.Addition = &v
}
